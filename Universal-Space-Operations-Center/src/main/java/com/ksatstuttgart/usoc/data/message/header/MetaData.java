/*
 * The MIT License
 *
 * Copyright 2017 KSat Stuttgart e.V..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.ksatstuttgart.usoc.data.message.header;

import com.ksatstuttgart.usoc.data.message.Var;
import java.util.ArrayList;
import java.util.Objects;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;

/**
 *
 * @author valentinstarlinger
 */
public class MetaData {

    private MetaDataType type;
    private String metaDataName;
    private ArrayList<Var> vars;

    public MetaData() {
        vars = new ArrayList<>();
    }

    public MetaData(MetaData m) {
        this.type = m.getType();
        this.metaDataName = m.getMetaDataName();
        vars = new ArrayList<>();

        for (Var var : m.getVars()) {
            vars.add(new Var(var));
        }
    }

    @XmlAttribute(name = "type")
    public MetaDataType getType() {
        return type;
    }

    public void setType(MetaDataType type) {
        this.type = type;
    }

    @XmlAttribute(name = "name")
    public String getMetaDataName() {
        if (metaDataName == null) {
            return "";
        }
        return metaDataName;
    }

    public void setMetaDataName(String metaDataName) {
        this.metaDataName = metaDataName;
    }

    @XmlElement(name = "var")
    public ArrayList<Var> getVars() {
        return vars;
    }

    public void setVars(ArrayList<Var> vars) {
        this.vars = vars;
    }

    public void addDataPoint(Var dataPoint) {
        vars.add(dataPoint);
    }

    @Override
    public String toString() {
        String s = "Meta name: " + this.getMetaDataName() + " (Type: " + this.type + ")\n";
        for (Var datapoint : this.getVars()) {
            s += "\t"+datapoint.toString()+"\n";
        }
        return s;
    }
    
    /*
    * AUTOGENERATED hashCode and equals functions
    */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 71 * hash + Objects.hashCode(this.type);
        hash = 71 * hash + Objects.hashCode(this.metaDataName);
        hash = 71 * hash + Objects.hashCode(this.vars);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final MetaData other = (MetaData) obj;
        if (!Objects.equals(this.getMetaDataName(), other.getMetaDataName())) {
            return false;
        }
        if (this.getType() != other.getType()) {
            return false;
        }
        return Objects.equals(this.getVars(), other.getVars());
    }
}
