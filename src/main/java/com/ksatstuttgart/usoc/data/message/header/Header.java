/*
 * MIT License
 *
 * Copyright (c) 2017 KSat e.V. and AerospaceResearch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
package com.ksatstuttgart.usoc.data.message.header;

import java.util.ArrayList;
import java.util.Objects;
import javax.xml.bind.annotation.XmlElement;

/**
 *
 * @author valentinstarlinger
 */
public class Header {

    private ArrayList<MetaData> metaData;

    public Header() {
        this.metaData = new ArrayList<>();
    }
    
    public Header(Header copy){
        this.metaData = new ArrayList<>();
        for (MetaData m : copy.getMetaData()) {
            this.metaData.add(new MetaData(m));
        }
    }

    @XmlElement(name = "metadata")
    public ArrayList<MetaData> getMetaData() {
        return metaData;
    }

    public void setMetaData(ArrayList<MetaData> metaData) {
        this.metaData = metaData;
    }

    public void addMetaData(MetaData metaData) {
        this.metaData.add(metaData);
    }

    @Override
    public String toString() {
        String s = "MetaData:\n";
        for (MetaData md : this.getMetaData()) {
            s += md.toString() + "\n";
        }
        return s;
    }
    
    /*
    * AUTOGENERATED hashCode and equals functions
    */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 59 * hash + Objects.hashCode(this.metaData);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Header other = (Header) obj;
        return Objects.equals(this.getMetaData(), other.getMetaData());
    }
}
